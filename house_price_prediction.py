# -*- coding: utf-8 -*-
"""House price prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uVqGM6HbsYBvS3h44pwSORFoQK5aOKLx

#Preprocessing the data
"""

import pandas as pd
df=pd.read_csv("/content/house_sales.csv")
df

df.columns

df.info()

df.isnull().sum()

df=df.drop(labels=['id','date','waterfront','view','yr_built','yr_renovated','zipcode','lat','long','sqft_living15','sqft_lot15','condition','grade'],axis=1)

for i in df.columns:
    print(f"Col : {i} and values are : {df[i].head().tolist()}")

df=df.dropna(axis=0)

df.isnull().sum()

df.describe()

"""#Model and training

"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""###Labels and feature declaration"""

temp1 = df.drop(['price'], axis=1)
feature = df['price']

X_train, X_test, y_train, y_test = train_test_split(temp1, feature, test_size=0.30, random_state=52)

predictor_model=LinearRegression()

predictor_model.fit(X_train,y_train)

X_test

sol=predictor_model.predict(X_test)

print(sol)

mae = mean_absolute_error(y_test,sol)
mse = mean_squared_error(y_test,sol)
rmse = mean_squared_error(y_test,sol, squared=False)
r2 = r2_score(y_test,sol)

print(f"""
Mean Absolute error : {mae}
Mean Squared Error : {mse}
Root mean squared error : {rmse}
Rsqaure Score : {r2}
""")

temp1.columns

df.sqft_basement.head()

X_test.head(2)

"""#Generating more records to train the model more"""

df.floors.describe()

import numpy as np
import pandas as pd
np.random.seed(42)
num_samples = 20000

# Generate random data within realistic ranges
bedrooms = np.random.randint(1, 8, num_samples)
bathrooms = np.round(np.random.uniform(1, 5, num_samples), 0)
sqft_living = np.random.randint(500, 10000, num_samples)
sqft_lot = np.random.randint(1000, 15000, num_samples)
floors = np.random.choice([1, 2, 3,4], num_samples)
sqft_above = np.random.randint(500, 8000, num_samples)
sqft_basement = sqft_living - sqft_above
sqft_basement[sqft_basement < 0] = 0  # Ensure no negative basement sizes

price = (
    10000 + 50000 * bedrooms +
    30000 * bathrooms +
    150 * sqft_living +
    50 * sqft_lot +
    10000 * floors +
    200 * sqft_above +
    100 * sqft_basement +
    np.random.normal(0, 100000, num_samples)  # adding noise
)
# Create the DataFrame
data = {
    'price': price,
    'bedrooms': bedrooms,
    'bathrooms': bathrooms,
    'sqft_living': sqft_living,
    'sqft_lot': sqft_lot,
    'floors': floors,
    'sqft_above': sqft_above,
    'sqft_basement': sqft_basement
}

df_trainer = pd.DataFrame(data)

# Display the first few rows of the dataset
print(df_trainer.head())

# Optionally, save the DataFrame to a CSV file
df_trainer.to_csv('synthetic_house_data.csv', index=False)

df_trainer

temp2 = df_trainer.drop(['price'], axis=1)
feature = df_trainer['price']

X_train, X_test, y_train, y_test = train_test_split(temp2, feature, test_size=0.30, random_state=52)

predictor_model.fit(X_train,y_train)
sol=predictor_model.predict(X_test)

mae = mean_absolute_error(y_test,sol)
mse = mean_squared_error(y_test,sol)
rmse = mean_squared_error(y_test,sol, squared=False)
r2 = r2_score(y_test,sol)

print(f"""
Mean Absolute error : {mae}
Mean Squared Error : {mse}
Root mean squared error : {rmse}
Rsqaure Score : {r2}
""")

print("HOUSE PRICE PREDICTION MODEL")
print("""
Enter the details of the house :
""")
bedrooms=int(input("No of Bedrooms :"))
bathrooms=int(input("No of Bathrooms :"))
livingarea=int(input("Living area in sqft :"))
lotarea=int(input("Lot area in sqft :"))
floor=int(input("No of floors :"))
sqftabove=int(input("Area above the house :"))
sqftbase=int(input("Area of basement of the house:"))

testing = pd.DataFrame({
    'bedrooms': [bedrooms],
    'bathrooms': [bathrooms],
    'sqft_living': [livingarea],
    'sqft_lot': [lotarea],
    'floors': [floor],
    'sqft_above': [sqftabove],
    'sqft_basement': [sqftbase]
})
ans=predictor_model.predict(testing)
print()
print(f"The predicted cost would is : {int(ans)} US dollars")